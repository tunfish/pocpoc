#######################
# Configure WireGuard #
#######################

# Note: The WireGuard role will also account for
# installing the appropriate wireguard packages.
#
# However, "wireguard-dkms" depends on the proper
# "linux-headers" package, otherwise it might croak::
#
#   ip link add wg0-server type wireguard
#   RTNETLINK answers: Operation not supported
#
# or::
#
#   dpkg-reconfigure wireguard-dkms
#   Module build for the currently running kernel was skipped since the
#   kernel source for this kernel does not seem to be installed.
#
# The solution to this is to just install them by running::
#
#   apt -y install linux-headers-$(uname -r)
#
# and rebuild the WireGuard kernel module::
#
#   dpkg-reconfigure wireguard-dkms
#


# =====================
#  The host "tf-alice"
# =====================
- hosts: "tf-alice"

  # WireGuard information
  # Private key: sGE8Dyg3qtZZs/WoTD+tiR6MlVKLv7oNvcAQpsVYTXE=
  # Public  key: wsBboYn9kx5NKW94AyF6kQ3wWyIjy7zHfoeLiP4OZT0=

  become: "yes"
  remote_user: "vagrant"

  # Use the Ansible role "tunfish.wireguard"
  # https://github.com/tunfish/ansible-wireguard
  roles:
    - { role: tunfish.wireguard }

  vars:
    # https://git.zx2c4.com/WireGuard/about/src/tools/wg.8
    # wg genkey | tee privatekey | wg pubkey > publickey
    wireguard_root_ip: "10.10.10.51/24"
    wireguard_listen_port: "51820"
    wireguard_private_key: "sGE8Dyg3qtZZs/WoTD+tiR6MlVKLv7oNvcAQpsVYTXE="
    wireguard_clients:

      # A WireGuard [Peer] configuration entry

      - # A base64 public key calculated by "wg pubkey" from a private key.
        # This usually gets transmitted out of band to the author of the configuration file.
        # Required.
        public_key: "JGZ38kufH6cK/uUYR50mk1e+IFPEHzpOKH8L7Dc17Rg="

        # A comma-separated list of IP (v4 or v6) addresses with CIDR masks from which
        # incoming traffic for this peer is allowed and to which outgoing traffic for
        # this peer is directed. The catch-all 0.0.0.0/0 may be specified for matching
        # all IPv4 addresses, and ::/0 may be specified for matching all IPv6 addresses.
        # May be specified multiple times. Required.
        allowed_ip: "10.10.10.52/32"

        # An endpoint IP or hostname, followed by a colon, and then a port number.
        # This endpoint will be updated automatically to the most recent source
        # IP address and port of correctly authenticated packets from the peer.
        # Optional.
        endpoint: "192.168.50.52:51820"

        # A base64 preshared key generated by "wg genpsk". This option adds an additional
        # layer of symmetric-key cryptography to be mixed into the already existing
        # public-key cryptography, for post-quantum resistance.
        # Optional, and may be omitted.
        #preshared_key: "bdGoZ2MuKCFhf6L4VKhrdXW8gSx8emTlZVQlLWAvxwc="

      # Another WireGuard [Peer] configuration entry
      #- public_key: "..."
      #  allowed_ip: "..."
      #  endpoint: "..."
      #  preshared_key: "..."


# ===================
#  The host "tf-bob"
# ===================
- hosts: "tf-bob"

  # WireGuard information
  # Private key: EKsBoTayi+wFYpQjJvgpI2buODy5D1H9Mrtx5OFZWUk=
  # Public  key: JGZ38kufH6cK/uUYR50mk1e+IFPEHzpOKH8L7Dc17Rg=

  become: "yes"
  remote_user: "vagrant"

  # Use the Ansible role "tunfish.wireguard"
  # https://github.com/tunfish/ansible-wireguard
  roles:
    - { role: tunfish.wireguard }

  vars:
    wireguard_root_ip: "10.10.10.52/24"
    wireguard_listen_port: "51820"
    wireguard_private_key: "EKsBoTayi+wFYpQjJvgpI2buODy5D1H9Mrtx5OFZWUk="
    wireguard_clients:
      - public_key: "wsBboYn9kx5NKW94AyF6kQ3wWyIjy7zHfoeLiP4OZT0="
        allowed_ip: "10.10.10.51/32"
        endpoint: "192.168.50.51:51820"
