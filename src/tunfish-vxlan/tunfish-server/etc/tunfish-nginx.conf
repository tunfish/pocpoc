# WebSockets with OpenResty
# https://medium.com/technology-and-programming/websockets-with-openresty-1778601c9e05

location /s {

  # Configure websocket behavior
  lua_socket_log_errors on;
  lua_check_client_abort on;

  content_by_lua '

    local server = require "resty.websocket.server"

    -- Server handle
    local wb, err = server:new{
      timeout = 5000,
      max_payload_len = 65535
    }

    -- Error handling
    if not wb then
      ngx.log(ngx.ERR, "failed to new websocket: ", err)
      return ngx.exit(444)
    end

    while true do
      local data, typ, err = wb:recv_frame()

      -- Error handling
      if wb.fatal then
        ngx.log(ngx.ERR, "failed to receive frame: ", err)
        return ngx.exit(444)
      end

      -- Empty data
      if not data then
        local bytes, err = wb:send_ping()
        if not bytes then
          ngx.log(ngx.ERR, "failed to send ping: ", err)
          return ngx.exit(444)
        end

      -- Receive "close connection"
      elseif typ == "close" then break

      -- Receive ping, answer with pong
      elseif typ == "ping" then
        local bytes, err = wb:send_pong()
        if not bytes then
          ngx.log(ngx.ERR, "failed to send pong: ", err)
          return ngx.exit(444)
        end

      -- Receive pong
      elseif typ == "pong" then
        ngx.log(ngx.INFO, "client ponged")

      -- Lets get real!
      elseif typ == "text" then

        -- Echo server
        local bytes, err = wb:send_text(data)
        if not bytes then
          ngx.log(ngx.ERR, "failed to send text: ", err)
          return ngx.exit(444)
        end

      end
    end

    -- Close connection
    wb:send_close()
  ';
}
